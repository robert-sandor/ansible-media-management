- name: Set jackett api url
  ansible.builtin.set_fact:
    jackett_api_url: "https://{{ jackett_hostname }}.{{ domain }}"

- name: Get jackett cookie
  ansible.builtin.uri:
    url: "{{ jackett_api_url }}/UI/Login"
    method: GET
    validate_certs: "{{ validate_certificates }}"
  register: _response
  retries: 10
  delay: 10
  until: _response.status != -1 and _response.status < 500 and _response.status != 404

- name: Save jackett cookie
  ansible.builtin.set_fact:
    jackett_cookie: "{{ _response.cookies_string }}"

- name: Set jackett indexer config
  ansible.builtin.uri:
    url: "{{ jackett_api_url }}/api/v2.0/indexers/{{ jackett_indexer_name }}/config"
    method: POST
    body_format: json
    body: "{{ jackett_indexer_config }}"
    headers:
      Cookie: "{{ jackett_cookie }}"
    status_code: 204
    validate_certs: "{{ validate_certificates }}"
  register: _response
  retries: 10
  delay: 10
  until: _response.status != -1 and _response.status < 500 and _response.status != 404 and _response.status < 500 and _response.status != 404

- name: Set jackett server config
  ansible.builtin.uri:
    url: "{{ jackett_api_url }}/api/v2.0/server/config"
    method: POST
    body_format: json
    body: 
      port: "{{ jackett_config_port }}"
      external: "{{ jackett_config_external }}"
      updatedisabled: "{{ jackett_config_updatedisabled }}"
      prerelease: "{{ jackett_config_prerelease }}"
      blackholedir: "{{ jackett_config_blackholedir }}"
      logging: "{{ jackett_config_logging }}"
      basepathoverride: "{{ jackett_config_basepathoverride }}"
      cache_enabled: "{{ jackett_config_cache_enabled }}"
      cache_ttl: "{{ jackett_config_cache_ttl }}"
      cache_max_results_per_indexer: "{{ jackett_config_cache_max_results_per_indexer }}"
      flaresolverrurl: "{{ jackett_config_flaresolverrurl }}"
      omdbkey: "{{ jackett_config_omdbkey }}"
      omdburl: "{{ jackett_config_omdburl }}"
      proxy_type: "{{ jackett_config_proxy_type }}"
      proxy_url: "{{ jackett_config_proxy_url }}"
      proxy_port: "{{ jackett_config_proxy_port }}"
      proxy_username: "{{ jackett_config_proxy_username }}"
      proxy_password: "{{ jackett_config_proxy_password }}"
    headers:
      Cookie: "{{ jackett_cookie }}"
    validate_certs: "{{ validate_certificates }}"
  register: _response
  retries: 10
  delay: 10
  until: _response.status != -1 and _response.status < 500 and _response.status != 404

- name: Set jackett admin password
  ansible.builtin.uri:
    url: "{{ jackett_api_url }}/api/v2.0/server/adminpassword"
    method: POST
    body_format: json
    body: "jackett_admin_password }}"
    headers:
      Cookie: "{{ jackett_cookie }}"
    status_code: 204
    validate_certs: "{{ validate_certificates }}"
  register: _response
  retries: 10
  delay: 10
  until: _response.status != -1 and _response.status < 500 and _response.status != 404

- name: Get jackett volume info
  community.docker.docker_volume_info:
    name: "{{ jackett_volume }}"
  register: _result

- name: Get jackett volume path
  ansible.builtin.set_fact:
    jackett_volume_path: "{{ _result.volume.Mountpoint }}"
  when: _result.exists

- name: Read the ServerConfig file
  become: yes
  ansible.builtin.shell:
    cmd: "cat {{ jackett_volume_path }}/Jackett/ServerConfig.json | grep APIKey | cut -d ':' -f2 | tr -d ' \",\"'"
  register: jacket_api_lookup

- name: Save jackett facts
  ansible.builtin.set_fact:
    jackett_api_key: "{{ jacket_api_lookup.stdout }}"
    jackett_torznab_url: "http://{{ jackett_hostname }}:{{ jackett_port }}/api/v2.0/indexers/{{ jackett_indexer_name }}/results/torznab/"
