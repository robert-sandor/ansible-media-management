version: "3.8"

services:

{% if traefik_enable %}
  {{ traefik_name }}:
    container_name: {{ traefik_name }}
    hostname: {{ traefik_name }}
    image: traefik:{{ traefik_version }}
    command:
      - "--api=true"
      - "--accesslog={{ traefik_enable_access_logs | ternary('true', 'false') }}"
      - "--providers.docker=true"
      - "--providers.docker.network={{ network_name }}"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge=true"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge.provider={{ acme_provider }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.email={{ acme_email }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.{{ acme_provider }}.acme.caserver=https://acme{% if acme_testing_mode %}-staging{% endif %}-v02.api.letsencrypt.org/directory"
      - "--metrics.prometheus={{ traefik_enable_metrics | ternary('true', 'false') }}"
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% for e in acme_env %}
      - {{ e }}={{ acme_env[e] }}
{% endfor %}
    networks:
      - {{ network_name }}
    ports:
      - 80:80
      - 443:443
    expose:
      - 8080
{% if traefik_enable_metrics %}
      - {{ traefik_metrics_port }}
{% endif %}
    volumes:
      - {{ acme_volume }}:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`{{ traefik_name }}.{{ domain }}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver={{ acme_provider }}
{% if traefik_enable_metrics %}
      - traefik.http.routers.metrics.rule=Host(`{{ traefik_name }}.{{ domain }}`) && Path(`/metrics`)
      - traefik.http.routers.metrics.entrypoints=websecure
      - traefik.http.routers.metrics.service=prometheus@internal
      - traefik.http.routers.metrics.tls.certresolver={{ acme_provider }}
{% endif %}
      - com.centurylinklabs.watchtower.enable={{ traefik_autoupdate | ternary('true', 'false')}}
    restart: {{ restart_policy }}

{% endif %}
{% if qbt_enable %}
  {{ qbt_name }}:
    container_name: {{ qbt_name }}
    hostname: {{ qbt_hostname }}
    image: {{ qbt_image }}:{{ qbt_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
      - WEBUI_PORT={{ qbt_ui_port }}
    volumes:
      - {{ qbt_volume }}:/config
      - {{ data_volume }}:/data
    networks:
      - {{ network_name }}
    ports:
      - {{ qbt_torrent_port }}:{{ qbt_torrent_port }}
      - {{ qbt_torrent_port }}:{{ qbt_torrent_port }}/udp
    expose:
      - {{ qbt_ui_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ qbt_name }}.rule=Host(`{{ qbt_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ qbt_name }}.entrypoints=websecure
      - traefik.http.services.{{ qbt_name }}.loadbalancer.server.port={{ qbt_ui_port }}
      - traefik.http.routers.{{ qbt_name }}.service={{ qbt_name }}
      - traefik.http.routers.{{ qbt_name }}.tls.certresolver={{ acme_provider }}
      - com.centurylinklabs.watchtower.enable={{ qbt_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if jackett_enable %}
  {{ jackett_name }}:
    container_name: {{ jackett_name }}
    hostname: {{ jackett_hostname }}
    image: {{ jackett_image }}:{{ jackett_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% if jackett_apply_dark_theme %}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:jackett
{% endif %}
    volumes:
      - {{ jackett_volume }}:/config
    networks:
      - {{ network_name }}
    expose:
      - {{ jackett_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ jackett_name }}.rule=Host(`{{ jackett_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ jackett_name }}.entrypoints=websecure
      - traefik.http.services.{{ jackett_name }}.loadbalancer.server.port={{ jackett_port }}
      - traefik.http.routers.{{ jackett_name }}.service={{ jackett_name }}
      - traefik.http.routers.{{ jackett_name }}.tls.certresolver={{ acme_provider }}
      - com.centurylinklabs.watchtower.enable={{ jackett_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if sonarr_enable %}
  {{ sonarr_name }}:
    container_name: {{ sonarr_name }}
    hostname: {{ sonarr_hostname }}
    image: {{ sonarr_image }}:{{ sonarr_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% if sonarr_apply_dark_theme %}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
{% endif %}
    volumes:
      - {{ sonarr_volume }}:/config
      - {{ data_volume }}:/data
    networks:
      - {{ network_name }}
    expose:
      - {{ sonarr_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ sonarr_name }}.rule=Host(`{{ sonarr_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ sonarr_name }}.entrypoints=websecure
      - traefik.http.services.{{ sonarr_name }}.loadbalancer.server.port={{ sonarr_port }}
      - traefik.http.routers.{{ sonarr_name }}.service={{ sonarr_name }}
      - traefik.http.routers.{{ sonarr_name }}.tls.certresolver={{ acme_provider }}
      - com.centurylinklabs.watchtower.enable={{ sonarr_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if radarr_enable %}
  {{ radarr_name }}:
    container_name: {{ radarr_name }}
    hostname: {{ radarr_hostname }}
    image: {{ radarr_image }}:{{ radarr_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% if radarr_apply_dark_theme %}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
{% endif %}
    volumes:
      - {{ radarr_volume }}:/config
      - {{ data_volume }}:/data
    networks:
      - {{ network_name }}
    expose:
      - {{ radarr_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ radarr_name }}.rule=Host(`{{ radarr_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ radarr_name }}.entrypoints=websecure
      - traefik.http.services.{{ radarr_name }}.loadbalancer.server.port={{ radarr_port }}
      - traefik.http.routers.{{ radarr_name }}.service={{ radarr_name }}
      - traefik.http.routers.{{ radarr_name }}.tls.certresolver={{ acme_provider }}
      - com.centurylinklabs.watchtower.enable={{ radarr_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if bazarr_enable %}
  {{ bazarr_name }}:
    container_name: {{ bazarr_name }}
    hostname: {{ bazarr_hostname }}
    image: {{ bazarr_image }}:{{ bazarr_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% if bazarr_apply_dark_theme %}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:bazarr
{% endif %}
    volumes:
      - {{ bazarr_volume }}:/config
      - {{ data_volume }}:/data
    networks:
      - {{ network_name }}
    expose:
      - {{ bazarr_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ bazarr_name }}.rule=Host(`{{ bazarr_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ bazarr_name }}.entrypoints=websecure
      - traefik.http.services.{{ bazarr_name }}.loadbalancer.server.port={{ bazarr_port }}
      - traefik.http.routers.{{ bazarr_name }}.service={{ bazarr_name }}
      - traefik.http.routers.{{ bazarr_name }}.tls.certresolver={{ acme_provider }}
      - com.centurylinklabs.watchtower.enable={{ bazarr_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if overseerr_enable %}
  {{ overseerr_name }}:
    container_name: {{ overseerr_name }}
    hostname: {{ overseerr_hostname }}
    image: {{ overseerr_image }}:{{ overseerr_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
    volumes:
      - {{ overseerr_volume }}:/config
    networks:
      - {{ network_name }}
    expose:
      - {{ overseerr_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ overseerr_name }}.rule=Host(`{{ overseerr_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ overseerr_name }}.entrypoints=websecure
      - traefik.http.services.{{ overseerr_name }}.loadbalancer.server.port={{ overseerr_port }}
      - traefik.http.routers.{{ overseerr_name }}.service={{ overseerr_name }}
      - traefik.http.routers.{{ overseerr_name }}.tls.certresolver={{ acme_provider }}
      - com.centurylinklabs.watchtower.enable={{ overseerr_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if prom_node_exp_enable %}
  {{ prom_node_exp_name }}:
    container_name: {{ prom_node_exp_name }}
    hostname: {{ prom_node_exp_name }}
    image: {{ prom_node_exp_image }}:{{ prom_node_exp_version }}
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    restart: {{ restart_policy }}
    labels:
      - com.centurylinklabs.watchtower.enable={{ prom_node_exp_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if pagent_enable %}
  {{ pagent_name }}:
    container_name: {{ pagent_name }}
    hostname: {{ pagent_hostname }}
    image: {{ pagent_image }}:{{ pagent_version }}
    networks:
      - {{ network_name }}
    ports:
      - 9001:9001
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: {{ restart_policy }}
    labels:
      - com.centurylinklabs.watchtower.enable={{ pagent_autoupdate | ternary('true', 'false')}}

{% endif %}
{% if wt_enable %}
  {{ wt_name }}:
    container_name: {{ wt_name }}
    hostname: {{ wt_name }}
    image: {{ wt_image }}:{{ wt_version }}
    restart: {{ restart_policy }}
    command:
      - "--schedule={{ wt_cron_schedule }}"
{% if wt_monitor_only %}
      - "--monitor-only"
{% endif %}
{% if wt_update_label_only %}
      - "--label-enable"
{% endif %}
{% if wt_discord_skip_startup_message %}
      - "--no-startup-message"
{% endif %}
{% if wt_discord_enable %}
      - "--notifications=slack"
      - "--notification-slack-hook-url={{ wt_discord_hook_url }}"
      - "--notification-slack-identifier={{ wt_discord_indentifier }}"
{% endif %}
    environment:
      - TZ={{ timezone }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - {{ network_name }}
    labels:
      - com.centurylinklabs.watchtower.enable={{ wt_autoupdate | ternary('true', 'false')}}
    
{% endif %}
networks:
  {{ network_name }}:
    external: true

volumes:
  {{ data_volume }}:
    external: true
  {{ acme_volume }}:
    external: true
  {{ qbt_volume }}:
    external: true
  {{ jackett_volume }}:
    external: true
  {{ sonarr_volume }}:
    external: true
  {{ radarr_volume }}:
    external: true
  {{ bazarr_volume }}:
    external: true
  {{ overseerr_volume }}:
    external: true
