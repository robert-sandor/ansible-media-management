version: "3.8"

services:

{% if traefik_enable %}
  {{ traefik_name }}:
    container_name: {{ traefik_name }}
    hostname: {{ traefik_name }}
    image: traefik:{{ traefik_version }}
    command:
      - "--api=true"
      - "--accesslog={{ traefik_enable_access_logs | ternary('true', 'false') }}"
      - "--providers.docker=true"
      - "--providers.docker.network={{ network_name }}"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge=true"
      - "--certificatesresolvers.{{ acme_provider }}.acme.dnschallenge.provider={{ acme_provider }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.email={{ acme_email }}"
      - "--certificatesresolvers.{{ acme_provider }}.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.{{ acme_provider }}.acme.caserver=https://acme{% if acme_testing_mode %}-staging{% endif %}-v02.api.letsencrypt.org/directory"
      - "--metrics.prometheus={{ traefik_enable_metrics | ternary('true', 'false') }}"
      - "--entryPoints.metrics.address=:{{ traefik_metrics_port }}"
      - "--metrics.prometheus.entryPoint=metrics"
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% for e in acme_env %}
      - {{ e }}={{ acme_env[e] }}
{% endfor %}
    networks:
      - {{ network_name }}
    ports:
      - 80:80
      - 443:443
    expose:
      - 8080
{% if traefik_enable_metrics %}
      - {{ traefik_metrics_port }}
{% endif %}
    volumes:
      - {{ acme_volume }}:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`{{ traefik_name }}.{{ domain }}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver={{ acme_provider }}
      - flame.type=application
      - flame.name={{ traefik_name }}
      - flame.url={{ traefik_name }}.{{ domain }}
      - flame.icon=traffic-light
    restart: {{ restart_policy }}

{% endif %}
{% if qbt_enable %}
  {{ qbt_name }}:
    container_name: {{ qbt_name }}
    hostname: {{ qbt_hostname }}
    image: {{ qbt_image }}:{{ qbt_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
      - WEBUI_PORT={{ qbt_ui_port }}
    volumes:
      - {{ qbt_volume }}:/config
      - {{ folders.downloads }}:/downloads
    networks:
      - {{ network_name }}
    ports:
      - {{ qbt_torrent_port }}:{{ qbt_torrent_port }}
      - {{ qbt_torrent_port }}:{{ qbt_torrent_port }}/udp
      - {{ qbt_ui_port }}:{{ qbt_ui_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ qbt_name }}.rule=Host(`{{ qbt_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ qbt_name }}.entrypoints=websecure
      - traefik.http.services.{{ qbt_name }}.loadbalancer.server.port={{ qbt_ui_port }}
      - traefik.http.routers.{{ qbt_name }}.service={{ qbt_name }}
      - traefik.http.routers.{{ qbt_name }}.tls.certresolver={{ acme_provider }}

{% endif %}
{% if jackett_enable %}
  {{ jackett_name }}:
    container_name: {{ jackett_name }}
    hostname: {{ jackett_hostname }}
    image: {{ jackett_image }}:{{ jackett_version }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% if jackett_apply_dark_theme %}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:jackett
{% endif %}
    volumes:
      - {{ jackett_volume }}:/config
    networks:
      - {{ network_name }}
    ports:
      - {{ jackett_port }}:{{ jackett_port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ jackett_name }}.rule=Host(`jackett_hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ jackett_name }}.entrypoints=websecure
      - traefik.http.services.{{ jackett_name }}.loadbalancer.server.port={{ jackett_port }}
      - traefik.http.routers.{{ jackett_name }}.service={{ jackett_name }}
      - traefik.http.routers.{{ jackett_name }}.tls.certresolver={{ acme_provider }}

{% endif %}
{% if sonarr.install %}
  {{ sonarr.name }}:
    container_name: {{ sonarr.name }}
    hostname: {{ sonarr.hostname }}
    image: {{ sonarr.image }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% if sonarr.apply_dark_theme %}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
{% endif %}
    volumes:
      - {{ folders.config }}/sonarr:/config
      - {{ folders.data }}:/data
    networks:
      - {{ network_name }}
    ports:
      - {{ sonarr.port }}:{{ sonarr.port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ sonarr.name }}.rule=Host(`{{ sonarr.hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ sonarr.name }}.entrypoints=websecure
      - traefik.http.services.{{ sonarr.name }}.loadbalancer.server.port={{ sonarr.port }}
      - traefik.http.routers.{{ sonarr.name }}.service={{ sonarr.name }}
      - traefik.http.routers.{{ sonarr.name }}.tls.certresolver={{ acme_provider }}

{% endif %}
{% if radarr.install %}
  {{ radarr.name }}:
    container_name: {{ radarr.name }}
    hostname: {{ radarr.hostname }}
    image: {{ radarr.image }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
{% if radarr.apply_dark_theme %}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
{% endif %}
    volumes:
      - {{ folders.config }}/radarr:/config
      - {{ folders.data }}:/data
    networks:
      - {{ network_name }}
    ports:
      - {{ radarr.port }}:{{ radarr.port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ radarr.name }}.rule=Host(`{{ radarr.hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ radarr.name }}.entrypoints=websecure
      - traefik.http.services.{{ radarr.name }}.loadbalancer.server.port={{ radarr.port }}
      - traefik.http.routers.{{ radarr.name }}.service={{ radarr.name }}
      - traefik.http.routers.{{ radarr.name }}.tls.certresolver={{ acme_provider }}

{% endif %}
{% if overseerr.install %}
  {{ overseerr.name }}:
    container_name: {{ overseerr.name }}
    hostname: {{ overseerr.hostname }}
    image: {{ overseerr.image }}
    restart: {{ restart_policy }}
    environment:
      - PUID={{ ansible_facts.user_uid }}
      - PGID={{ ansible_facts.user_gid }}
      - TZ={{ timezone }}
    volumes:
      - {{ folders.config }}/overseerr:/config
    networks:
      - {{ network_name }}
    ports:
      - {{ overseerr.port }}:{{ overseerr.port }}
    labels:
      - traefik.enable=true
      - traefik.http.routers.{{ overseerr.name }}.rule=Host(`{{ overseerr.hostname }}.{{ domain }}`)
      - traefik.http.routers.{{ overseerr.name }}.entrypoints=websecure
      - traefik.http.services.{{ overseerr.name }}.loadbalancer.server.port={{ overseerr.port }}
      - traefik.http.routers.{{ overseerr.name }}.service={{ overseerr.name }}
      - traefik.http.routers.{{ overseerr.name }}.tls.certresolver={{ acme_provider }}

{% endif %}
networks:
  {{ network_name }}:
    external: true

volumes:
  {{ acme_volume }}:
    external: true
  {{ qbt_volume }}:
    external: true
  {{ jackett_volume }}:
    external: true